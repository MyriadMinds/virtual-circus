#version 460

layout(location = 0) in	vec3 position;
layout(location = 1) in vec3 normal;
layout(location = 2) in vec2 texcoord;
layout(location = 3) in vec4 tangent;
layout(location = 4) in vec4 color;
layout(location = 5) in vec4 joints;
layout(location = 6) in vec4 weights;

layout(set = 0, binding = 0) uniform UniformBufferObject {
    mat4 model;
    mat4 view;
    mat4 proj;
} ubo;

layout(location = 0) out vec3 fragColor;
layout(location = 1) out vec2 fragTexCoord;

void main() {
	vec3 calcNormal = mat3(ubo.view) * mat3(ubo.model) * normal;
	vec3 lightDirection = normalize(mat3(ubo.view) * vec3(1.0));
	float lightIntensity = clamp(dot(lightDirection, calcNormal), 0, 1);
	gl_Position = ubo.proj * ubo.view * ubo.model * vec4(position, 1.0);
	fragColor = vec3(1.0, 1.0, 1.0) * lightIntensity;
	fragTexCoord = texcoord;
}